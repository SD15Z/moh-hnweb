# This is a manual workflow that performs following activities:
# 1. Determine the version number tag i.e. Release_1.0_<branch-name>_<build execution>  
# 2. Determine tags for OpenShift image
# 3. Edit .env in frontend with the value
# 3. Creates images for frontend and backend code
# 4. Tags the images with release number
# 5. Tags the images with additional tags if any
# 6. Upload the images in image repository in tools namespace
# 7. Tag the commit in Git with release number and <Check> Optional tags

name: mspdirect-release-draft
# Build the image and deploy in OpenShift environment
env:
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: image-registry.apps.silver.devops.gov.bc.ca/c5839f-tools
  IMAGE_REGISTRY_USER: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN }}
  IMAGE_NAME_BACKEND: mspdirect-backend
  IMAGE_NAME_FRONTEND: mspdirect-frontend
  IMAGE_TAGS:
  RELEASE_VERSION:


on:
  # Run the workflow manually, instead of on a push.
  # The user specifies the optional tag  
  # --------------------------------------------------------------------------
  
  workflow_dispatch:
    inputs:
      RELEASE_NAME:
        required: true
        default: 
      OPENSHIFT_IMAGE_TAG:
        description: 'Optional parameter for additional tags on released images. '
        required: false
        default:
      PRE_RELEASE:
        type: boolean
        description: Pre release.         
        
  #push:
  #  branches: [ main ]
  #  paths: 
  #    - "backend/**"

jobs:

  createMSPDirectRelease:
    runs-on: ubuntu-latest
    
    steps:
    # Check out the code
    - name: Check out code
      id: checkout
      uses: actions/checkout@v2
      with:
        ref: 5492-release-process     
    - name: Set the value
      id: step_one
      run: |
        echo "action_state=yellow" >> $GITHUB_ENV
    - name: Use the value
      id: step_two
      run: |
        echo "${{ env.action_state }}" # This will output 'yellow'

    # 1. Determine the version number tag i.e. Release_1.0_<branch-name>_<build execution> 
    - name: Determine Version number
      # Branch name is fixed to 'main' in version identifier
      run: |
        echo "RELEASE_VERSION= Draft_1.0_main_${{github.run_number}} " | tee -a $GITHUB_ENV
        
    # 2. Determine tags for OpenShift image
    - name: Determine image tags
      run: |
        echo "IMAGE_TAGS= ${GITHUB_SHA::12} ${{ env.RELEASE_VERSION }} ${{ github.event.inputs.OPENSHIFT_IMAGE_TAG }}  " | tee -a $GITHUB_ENV


    # 3. Edit .env in frontend with the value
    - name: Edit env file to add version
      run: |
        cd ./frontend/env_config
        sed -i 's/<VERSION>/${{ env.RELEASE_VERSION }}/' .env

# 3. Creates images for frontend and backend code
# 4. Tags the images with release number
# 5. Tags the images with additional tags if any
    # Build frontend from docker file
    - name: Build frontend from Dockerfile
      id: build-docker-frontend
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME_FRONTEND }}
        tags: ${{ env.IMAGE_TAGS }}
        context: ./frontend
        dockerfiles: |
          ./frontend/Dockerfile

    # Build backend from docker file
    - name: Build backend from Dockerfile
      id: build-docker-backend
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME_BACKEND }}
        tags: ${{ env.IMAGE_TAGS }}
        context: ./backend
        dockerfiles: |
          ./backend/Dockerfile

# 6. Upload the images in image repository in tools namespace
    - name: Push frontend image to registry
      id: push-image-frontend
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-docker-frontend.outputs.image }}
        tags: ${{ steps.build-docker-frontend.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    - name: Push backend image to registry
      id: push-image-backend
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-docker-backend.outputs.image }}
        tags: ${{ steps.build-docker-backend.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

# 7. Tag the commit in Git with release number and <Check> Optional tags
    - name: Tag and create Release
      uses: avakar/tag-and-release@v1
      id: tag-and-release
      with:
        tag_name: ${{  env.RELEASE_VERSION }}
        prerelease: ${{ github.event.inputs.PRE_RELEASE }}
        release_name: ${{ github.event.inputs.RELEASE_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Print Release URL
      env:
        URL: ${{ steps.html_url.outputs.html_url }}
        ID: ${{ steps.html_url.outputs.id }}
      run: |
        echo
        echo "======================== Your new release is available at: ========================"
        echo ${{ env.URL }}
        echo "==================================================================================="
        echo
        echo "Unique ID for this release : ${{ env.URL }} "        

    # # Update the image ID in the manifest repository used by Argo CD.
    # # We need to use the SSH deploy key to check out the manifest repo, set up
    # # Kustomize in the runner, update the image ID, commit the change, and
    # # push the changes back to the manifest repository.
    # # ------------------------------------------------------------------------
    # - name: Prepare deploy key
    #   uses: webfactory/ssh-agent@v0.5.3
    #   with:
    #     ssh-private-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}

    # - name: Check out manifest repo
    #   uses: actions/checkout@v2
    #   with:
    #     ssh-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}
    #     repository: ${{ secrets.GITOPS_C5839F_REPO }}
    #     ref: main

    # - name: Set up Kustomize
    #   uses: imranismail/setup-kustomize@v1

    # - name: Update image ID and commit change
    #   if: ${{ success() }}
    #   run: |
    #     cd mspdirect-devops/overlays/test
    #     kustomize edit set image "backend-image=image-registry.openshift-image-registry.svc:5000/c5839f-tools/${{ env.IMAGE_NAME }}@${{ steps.push-image.outputs.digest }}"
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git commit -am "Update Backend API image ID for test"
    #     git push origin