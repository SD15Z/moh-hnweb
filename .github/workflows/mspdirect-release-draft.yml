# This is a manual workflow that performs following activities:
# 1. Determine the version number tag i.e. Release_1.0_<branch-name>_<build execution>  
# 2. Determine tags for OpenShift image
# 3. Edit .env in frontend with the value
# 3. Creates images for frontend and backend code
# 4. Tags the images with release number
# 5. Tags the images with additional tags if any
# 6. Upload the images in image repository in tools namespace
# 7. Tag the commit in Git with release number 

name: mspdirect-release-draft
# Build the image and deploy in OpenShift environment
env:
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: image-registry.apps.silver.devops.gov.bc.ca/c5839f-tools
  IMAGE_REGISTRY_USER: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN }}
  IMAGE_NAME_BACKEND: mspdirect-backend
  IMAGE_NAME_FRONTEND: mspdirect-frontend
  IMAGE_TAGS:
  RELEASE_VERSION:
  #Variables for deploy process
  OPENSHIFT_SERVER: ${{ secrets.C5839F_OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN }}
  OPENSHIFT_NAMESPACE: "c5839f-"
  DEFAULT_NAMESPACE: "c5839f-tools"  


on:
  # Run the workflow manually, instead of on a push.
  # The user specifies the optional tag  
  # --------------------------------------------------------------------------
  
  workflow_dispatch:
    inputs:
      OPENSHIFT_IMAGE_TAG:
        description: 'Optional parameter for additional tags on released images. '
        required: false
        default:
      DEVELOPMENT:
        type: boolean
        description: Remove after development of workflow is complete
        default: true                 
        # inputs for deploy job
      Environment:
        type: choice
        description: Select an environment
        options:
        - Dev
        - Test
      Release:
        description: 'Enter build number. '
        required: true
        default:         
        
  #push:
  #  branches: [ main ]
  #  paths: 
  #    - "backend/**"

jobs:

  createMSPDirectRelease:
    runs-on: ubuntu-latest
    
    steps:
    # Check out the code
    - name: Check out code
      id: checkout
      uses: actions/checkout@v2
      with:
        ref: 5492-release-process     

    # 1. Determine the version number tag i.e. Release_1.0_<branch-name>_<build execution> 
    - name: Determine Version number
      # Branch name is fixed to 'main' in version identifier
      run: |
        echo "RELEASE_VERSION=Draft_1.0_main_${{github.run_number}}" | tee -a $GITHUB_ENV
        
    # 2. Determine tags for OpenShift image
    - name: Determine image tags
      run: |
        echo "IMAGE_TAGS= ${GITHUB_SHA::12} ${{ env.RELEASE_VERSION }} ${{ github.event.inputs.OPENSHIFT_IMAGE_TAG }}  " | tee -a $GITHUB_ENV


    # 3. Edit .env in frontend with the value
    - name: Edit env file to add version
      run: |
        cd ./frontend/env_config
        sed -i 's/<VERSION>/${{ env.RELEASE_VERSION }}/' .env

# 3. Creates images for frontend and backend code
# 4. Tags the images with release number
# 5. Tags the images with additional tags if any
    # Build frontend from docker file
    - name: Build frontend from Dockerfile
      id: build-docker-frontend
      # Remove after dev is complete
      if: ${{ github.event.inputs.DEVELOPMENT == 'false' }}
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME_FRONTEND }}
        tags: ${{ env.IMAGE_TAGS }}
        context: ./frontend
        dockerfiles: |
          ./frontend/Dockerfile

    # Build backend from docker file
    - name: Build backend from Dockerfile
      id: build-docker-backend
      # Remove after dev is complete
      if: ${{ github.event.inputs.DEVELOPMENT == 'false' }}
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME_BACKEND }}
        tags: ${{ env.IMAGE_TAGS }}
        context: ./backend
        dockerfiles: |
          ./backend/Dockerfile

# 6. Upload the images in image repository in tools namespace
    - name: Push frontend image to registry
      id: push-image-frontend
      # Remove after dev is complete
      if: ${{ github.event.inputs.DEVELOPMENT == 'false' }}
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-docker-frontend.outputs.image }}
        tags: ${{ steps.build-docker-frontend.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    - name: Push backend image to registry
      id: push-image-backend
      # Remove after dev is complete
      if: ${{ github.event.inputs.DEVELOPMENT == 'false' }}
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-docker-backend.outputs.image }}
        tags: ${{ steps.build-docker-backend.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

# 7. Tag the commit in Git with release number and <Check> Optional tags
    - name: Tag the commit with Release number
      id: tag
      # Remove after dev is complete
      if: ${{ github.event.inputs.DEVELOPMENT == 'false' }}
      uses: actions-ecosystem/action-push-tag@v1
      with:
        tag: v${{ env.RELEASE_VERSION }}
        message: 'Tag generated by GitHub Actions process.'

  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

      - name: Determine Namespace
        run: |
          echo "OPENSHIFT_NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }}${{ github.event.inputs.Environment }}"  | tee -a $GITHUB_ENV

      # https://github.com/redhat-actions/oc-login#readme
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.DEFAULT_NAMESPACE }}

      - name: Run OC commands
        run: |
        oc project




# For adding  release step, check out: https://github.com/actions-ecosystem/action-push-tag/blob/main/.github/workflows/release.yml
# Reference: https://github.com/marketplace/actions/create-release-notes

# Leaving this section for refeence in automating creating release story
# # 7. Tag the commit in Git with release number and <Check> Optional tags
    # - name: Create tag
    #   uses: actions/github-script@v5
    #   with:
    #     script: |
    #       github.rest.git.createRef({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         ref: 'refs/tags/<tagname>',
    #         sha: context.sha
#       })
#     - name: create a Tag and create Release
#       uses: avakar/tag-and-release@v1
#       id: tag-and-release
#       with:
#         tag_name: ${{  env.RELEASE_VERSION }}
#         prerelease: ${{ github.event.inputs.PRE_RELEASE }}
#         release_name: ${{ github.event.inputs.RELEASE_NAME }}
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


#     - name: Print Release URL
#       env:
#         URL: ${{ steps.tag-and-release.outputs.html_url }}
#         ID: ${{ steps.tag-and-release.outputs.id }}
#       run: |
#         echo
#         echo "======================== Your new release is available at: ========================"
#         echo ${{ env.URL }}
#         echo "==================================================================================="
#         echo
#         echo "Unique ID for this release : ${{ env.URL }} "        