name: BuildAndPush
# Build the image and deploy in OpenShift environment
env:
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: image-registry.apps.silver.devops.gov.bc.ca/c5839f-tools
  IMAGE_REGISTRY_USER: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN }}
  IMAGE_NAME: hnweb-frontend
  IMAGE_TAGS: 

on:
  # Run the workflow manually, instead of on a push.
  # The user specifies the values 
  # --------------------------------------------------------------------------
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Enter namepsacae:'
        required: true
        default: c5839f-dev
      buildConfig:
        description: 'Enter build config name:'
        required: true
        default: hnweb-frontend-bc
      branch:
        description: 'Enter branch name:'
        required: true
        default: 4969-setup-hnweb

  push:
    branches:
    - 4969-setup-hnweb

jobs:
  
  buildAndPush:
    runs-on: ubuntu-latest
    
    steps:
    - name: Print some values using bash
      id: vars
      shell: bash
      run: |
        pwd
      #  echo "##[set-output name= ${{ github.event.inputs.build }};]$(echo ${GITHUB_REF#refs/heads/})"
      #  echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"    

    - name: Another step without bash
      run: |
        echo "Branch: ${{ steps.vars.outputs.branch }}"
        echo "Sha: ${{ steps.vars.outputs.sha_short }}"

      # Build the image using the specified build config
      # Get its build ID
      # Get the commit ID of that build
      # Get the SHA256 signature of the image
      # Tag the image with the commit ID and "dev"
      # ------------------------------------------------
    - uses: actions/checkout@v2
    - name: Build the image and push to openshift regisrty
      id: build-image
      working-directory: ./frontend
      run: |
        oc version
        oc login --token=${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN }} --server=${{ secrets.C5839F_OPENSHIFT_SERVER }}
        # oc start-build hnweb-frontend-bc --from-dir=. 
        # export BUILDID="$(oc -n ${{ github.event.inputs.namespace }} get -o=jsonpath="{.status.lastVersion}" buildconfig ${{ github.event.inputs.buildConfig }})"
        # export COMMITID="$(oc -n ${{ github.event.inputs.namespace }} get -o=jsonpath="{.spec.revision.git.commit}" build ${{ github.event.inputs.buildConfig }}-$BUILDID | cut -c1-7)"
        # export IMAGESHA="$(oc -n ${{ github.event.inputs.namespace }} get -o=jsonpath="{.status.output.to.imageDigest}" build ${{ github.event.inputs.buildConfig }}-$BUILDID)"
        # oc -n c5839f-tools tag hnweb-frontend@$IMAGESHA hnweb-frontend:$COMMITID hnweb-frontend:dev
        # echo "::set-output name=imagesha::$IMAGESHA"

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "Intial image tag is ${{ env.IMAGE_TAGS }}"
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12} hnweb-dev" | tee -a $GITHUB_ENV
        echo "Final image tags is ${{ env.IMAGE_TAGS }}"


    # https://github.com/redhat-actions/buildah-build#readme
    - name: Build from Dockerfile
      id: build-docker
      uses: redhat-actions/buildah-build@v2
      with:
        image: hnweb-frontend
        tags: ${{ env.IMAGE_TAGS }}
        context: ./frontend
        build-args: env=test
        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
        dockerfiles: |
          ./frontend/Dockerfile


    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-docker.outputs.image }}
        tags: ${{ steps.build-docker.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    - name: Print digest information
      id: print-digest
      run: echo "Image pushed to ${{ steps.push-image.outputs.digest }}"

      # Update the image ID in the manifest repository used by Argo CD.
      # We need to use the SSH deploy key to check out the manifest repo, set up
      # Kustomize in the runner, update the image ID, commit the change, and
      # push the changes back to the manifest repository.
      # ------------------------------------------------------------------------
      - name: Prepare deploy key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}

      - name: Check out manifest repo
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}
          repository: ${{ GITOPS_C5839F_REPO }}
          ref: '4969-setup-hnweb'

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Update image ID and commit change
        if: ${{ success() }}
        run: |
          cd /overlays/dev
          kustomize edit set image "frontend-image=image-registry.openshift-image-registry.svc:5000/c5839f-tools/hnweb-frontend@${{ steps.push-image.outputs.digest }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update API image ID for Dev"
          git push origin